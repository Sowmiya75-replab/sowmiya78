class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None  # Pointer to previous node
        self.next = None  # Pointer to next node


class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_end(self, data):
        """Insert a new node at the end of the list."""
        new_node = Node(data)
        if not self.head:  # If list is empty
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node
        new_node.prev = current

    def delete_node(self, key):
        """Delete the first node with the given value."""
        current = self.head

        # If the list is empty
        if not current:
            print("List is empty.")
            return

        # If the node to delete is the head
        if current.data == key:
            self.head = current.next
            if self.head:
                self.head.prev = None
            current = None
            return

        # Search for the node to delete
        while current and current.data != key:
            current = current.next

        if not current:
            print("Value not found.")
            return

        # Unlink the node
        if current.next:
            current.next.prev = current.prev
        if current.prev:
            current.prev.next = current.next

        current = None

    def display_forward(self):
        """Display the list from head to tail."""
        current = self.head
        while current:
            print(current.data, end=" <-> ")
            current = current.next
        print("None")

    def display_backward(self):
        """Display the list from tail to head."""
        current = self.head
        if not current:
            print("List is empty.")
            return
        while current.next:  # Go to the tail
            current = current.next
        while current:
            print(current.data, end=" <-> ")
            current = current.prev
        print("None")


# Example usage:
dll = DoublyLinkedList()
dll.insert_at_end(10)
dll.insert_at_end(20)
dll.insert_at_end(30)

print("Forward traversal:")
dll.display_forward()

print("\nBackward traversal:")
dll.display_backward()

dll.delete_node(20)
print("\nAfter deleting 20 (forward):")
dll.display_forward()
