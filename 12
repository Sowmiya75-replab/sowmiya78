class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        """Insert a new key into the BST."""
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert_recursive(self.root, key)

    def _insert_recursive(self, current, key):
        if key < current.key:
            if current.left is None:
                current.left = Node(key)
            else:
                self._insert_recursive(current.left, key)
        elif key > current.key:
            if current.right is None:
                current.right = Node(key)
            else:
                self._insert_recursive(current.right, key)

    def search(self, key):
        """Search for a key in the BST."""
        return self._search_recursive(self.root, key)

    def _search_recursive(self, current, key):
        if current is None or current.key == key:
            return current
        if key < current.key:
            return self._search_recursive(current.left, key)
        else:
            return self._search_recursive(current.right, key)

    def inorder_traversal(self):
        """Inorder traversal of BST (sorted order)."""
        self._inorder_recursive(self.root)
        print()

    def _inorder_recursive(self, current):
        if current:
            self._inorder_recursive(current.left)
            print(current.key, end=" ")
            self._inorder_recursive(current.right)

# --- Main Program ---
bst = BinarySearchTree()

n = int(input("How many numbers do you want to insert? "))
for _ in range(n):
    num = int(input("Enter number: "))
    bst.insert(num)

print("\nInorder Traversal (sorted order):")
bst.inorder_traversal()

key_to_search = int(input("\nEnter a number to search in BST: "))
if bst.search(key_to_search):
    print(f"{key_to_search} found in BST.")
else:
    print(f"{key_to_search} not found in BST.")
